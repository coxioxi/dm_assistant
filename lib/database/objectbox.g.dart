// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8162950212086993027),
    name: 'Creature',
    lastPropertyId: const obx_int.IdUid(9, 6495695085731039543),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6543804339731205411),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4473251369204385006),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2375432641967259170),
        name: 'damage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8019055122481226249),
        name: 'hp',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4840042022443041573),
        name: 'ac',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7016261965808627741),
        name: 'initModifier',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3911230873281877181),
        name: 'initiativeNum',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7815963381662105170),
        name: 'npc',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6495695085731039543),
        name: 'gameId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 2157571580588525681),
        relationTarget: 'Game',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8302020563425498954),
    name: 'Game',
    lastPropertyId: const obx_int.IdUid(3, 2806208971755133145),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4369487957850619448),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5295719971729729743),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2806208971755133145),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'creatures',
        srcEntity: 'Creature',
        srcField: 'game',
      ),
      obx_int.ModelBacklink(
        name: 'gameLogs',
        srcEntity: 'GameLogs',
        srcField: 'game',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1335295992899774203),
    name: 'GameLogs',
    lastPropertyId: const obx_int.IdUid(5, 2051911261337565042),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1205718834900041200),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6376951574353041658),
        name: 'message',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8489668426880208461),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 671434020518737730),
        name: 'timestamp',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2051911261337565042),
        name: 'gameId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 5711626770659220423),
        relationTarget: 'Game',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 1335295992899774203),
    lastIndexId: const obx_int.IdUid(2, 5711626770659220423),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Creature: obx_int.EntityDefinition<Creature>(
      model: _entities[0],
      toOneRelations: (Creature object) => [object.game],
      toManyRelations: (Creature object) => {},
      getId: (Creature object) => object.id,
      setId: (Creature object, int id) {
        object.id = id;
      },
      objectToFB: (Creature object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final damageOffset = object.damage == null
            ? null
            : fbb.writeString(object.damage!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, damageOffset);
        fbb.addInt64(3, object.hp);
        fbb.addInt64(4, object.ac);
        fbb.addInt64(5, object.initModifier);
        fbb.addInt64(6, object.initiativeNum);
        fbb.addBool(7, object.npc);
        fbb.addInt64(8, object.game.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final hpParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final acParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final initModifierParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final npcParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          18,
          false,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object =
            Creature(
                name: nameParam,
                hp: hpParam,
                ac: acParam,
                initModifier: initModifierParam,
                npc: npcParam,
                id: idParam,
              )
              ..damage = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 8)
              ..initiativeNum = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                16,
              );
        object.game.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.game.attach(store);
        return object;
      },
    ),
    Game: obx_int.EntityDefinition<Game>(
      model: _entities[1],
      toOneRelations: (Game object) => [],
      toManyRelations: (Game object) => {
        obx_int.RelInfo<Creature>.toOneBacklink(
          9,
          object.id,
          (Creature srcObject) => srcObject.game,
        ): object.creatures,
        obx_int.RelInfo<GameLogs>.toOneBacklink(
          5,
          object.id,
          (GameLogs srcObject) => srcObject.game,
        ): object.gameLogs,
      },
      getId: (Game object) => object.id,
      setId: (Game object, int id) {
        object.id = id;
      },
      objectToFB: (Game object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object = Game(
          name: nameParam,
          createdAt: createdAtParam,
          id: idParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Game>(
          object.creatures,
          store,
          obx_int.RelInfo<Creature>.toOneBacklink(
            9,
            object.id,
            (Creature srcObject) => srcObject.game,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<Game>(
          object.gameLogs,
          store,
          obx_int.RelInfo<GameLogs>.toOneBacklink(
            5,
            object.id,
            (GameLogs srcObject) => srcObject.game,
          ),
        );
        return object;
      },
    ),
    GameLogs: obx_int.EntityDefinition<GameLogs>(
      model: _entities[2],
      toOneRelations: (GameLogs object) => [object.game],
      toManyRelations: (GameLogs object) => {},
      getId: (GameLogs object) => object.id,
      setId: (GameLogs object, int id) {
        object.id = id;
      },
      objectToFB: (GameLogs object, fb.Builder fbb) {
        final messageOffset = fbb.writeString(object.message);
        final typeOffset = fbb.writeString(object.type);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, messageOffset);
        fbb.addOffset(2, typeOffset);
        fbb.addInt64(3, object.timestamp.millisecondsSinceEpoch);
        fbb.addInt64(4, object.game.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final messageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final timestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object = GameLogs(
          message: messageParam,
          timestamp: timestampParam,
          type: typeParam,
          id: idParam,
        );
        object.game.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.game.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Creature] entity fields to define ObjectBox queries.
class Creature_ {
  /// See [Creature.id].
  static final id = obx.QueryIntegerProperty<Creature>(
    _entities[0].properties[0],
  );

  /// See [Creature.name].
  static final name = obx.QueryStringProperty<Creature>(
    _entities[0].properties[1],
  );

  /// See [Creature.damage].
  static final damage = obx.QueryStringProperty<Creature>(
    _entities[0].properties[2],
  );

  /// See [Creature.hp].
  static final hp = obx.QueryIntegerProperty<Creature>(
    _entities[0].properties[3],
  );

  /// See [Creature.ac].
  static final ac = obx.QueryIntegerProperty<Creature>(
    _entities[0].properties[4],
  );

  /// See [Creature.initModifier].
  static final initModifier = obx.QueryIntegerProperty<Creature>(
    _entities[0].properties[5],
  );

  /// See [Creature.initiativeNum].
  static final initiativeNum = obx.QueryIntegerProperty<Creature>(
    _entities[0].properties[6],
  );

  /// See [Creature.npc].
  static final npc = obx.QueryBooleanProperty<Creature>(
    _entities[0].properties[7],
  );

  /// See [Creature.game].
  static final game = obx.QueryRelationToOne<Creature, Game>(
    _entities[0].properties[8],
  );
}

/// [Game] entity fields to define ObjectBox queries.
class Game_ {
  /// See [Game.id].
  static final id = obx.QueryIntegerProperty<Game>(_entities[1].properties[0]);

  /// See [Game.name].
  static final name = obx.QueryStringProperty<Game>(_entities[1].properties[1]);

  /// See [Game.createdAt].
  static final createdAt = obx.QueryDateProperty<Game>(
    _entities[1].properties[2],
  );

  /// see [Game.creatures]
  static final creatures = obx.QueryBacklinkToMany<Creature, Game>(
    Creature_.game,
  );

  /// see [Game.gameLogs]
  static final gameLogs = obx.QueryBacklinkToMany<GameLogs, Game>(
    GameLogs_.game,
  );
}

/// [GameLogs] entity fields to define ObjectBox queries.
class GameLogs_ {
  /// See [GameLogs.id].
  static final id = obx.QueryIntegerProperty<GameLogs>(
    _entities[2].properties[0],
  );

  /// See [GameLogs.message].
  static final message = obx.QueryStringProperty<GameLogs>(
    _entities[2].properties[1],
  );

  /// See [GameLogs.type].
  static final type = obx.QueryStringProperty<GameLogs>(
    _entities[2].properties[2],
  );

  /// See [GameLogs.timestamp].
  static final timestamp = obx.QueryDateProperty<GameLogs>(
    _entities[2].properties[3],
  );

  /// See [GameLogs.game].
  static final game = obx.QueryRelationToOne<GameLogs, Game>(
    _entities[2].properties[4],
  );
}
